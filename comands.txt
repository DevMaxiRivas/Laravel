php artisan make:controller [Nombre del Controlador]
routes => web.php == urls.py django
Http/Controlers Controller == funciones de vistas por modelos

Creacion de Componentes via consola
php artisan make:component alert2

archivo database.php
Configuramos la conexion con la base de datos

migraciones 
realiza las migraciones en la base de datos
php artisan migrate

en cada archivo en database -> Migrate se cada clase tiene dos metodos
up y down 
up define lo que se va a hacer con esa migraciones
down seria el rollback (volver a antes de la migracion), para hacerlo
php artisan migrate:rollback

Supongamos que queremos crear una tabla en la base de datos mediante una migracion
php artisan make:migration create_[nombre-tabla]_table

Para cambiar algo en la tabla
php artisan make:migration add_[columna]_to_[nombreTabla]_table

Crear Modelos en Laravel
php artisan make:model Post
Ver en app -> Models

Seeders archivos php que ejecutan codigo al migrar nuevas tablas
php artisan migrate:fresh --seed
fresh elimina todas las migraciones y las vuelve a crear
--seed : ejecuta los seeders

Factories - Fabricas
Si utilizamos factories en los seeders podremos obtener con la
libreria fake una carga de tuplas para la BD aleatoria

php artisan make:factory PostFactory

En temas de paginacion de registros
Por defecto laravel utiliza tailwind si se requiere cambiar a
bootstrap se puede hacer modificando el metodo boot en
app\Providers\AppServiceProvider.php

use Illuminate\Contracts\Pagination\Paginator;
boot(){
    Paginator::useBootstrap();
}

Comando para ver todas las rutas en la App
php artisan r:l

A nivel de CEO Legibilidad de la Paginas/Enlaces URL
es recomendable usar en vez de id's los titulos de los posts (slugs)
Por ello hay que tenerlos en cuenta en la base de datos por tanto
Hay que modificar las migraciones y agregarle:
$table->string('slug')->unique();

Asignacion Masiva
Permite utilizar el metodo Create de un modelo para crear otra
tupla en la base de datos de acuerdo a la propiedad fillable
definida en ese modelo

Restricciones en formularios
$request->validate(...)
Utilizando restricciones desde una clase externa en la carpeta
// Http -> Request -> StorePostRequest
Primero utilizando el siguiente Comando
php artisan make:request StorePostRequest

TRADUCCIONES - Locations
Forma tradicional - No recomendable
php artisan lang:publish

Recomendable: Utilizar Paquetes
Utilizamos laravel lang (Buscar en google)
composer require laravel-lang/common

Para agregar un tipo de lenguaje
php artisan lang:add 

ENVIAR MAILS
Utilizando un visualizador de mail para obtener credenciales
de prueba utilizamos MailTrap
Reemplazamos las credenciales en el archivo .env
MAIL_MAILER=smtp
MAIL_HOST=sandbox.smtp.mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=febb4169c9f4a4
MAIL_PASSWORD=d7e90b63585759

Para p√≥der utilizar el envio de email es necesario
definir un archivo utilizando el siguiente comando
php artisan make:mail [NombreDelManejador]
Aparecera en 
app\Mail\PostCreatedMail

modificar el metodo content y crear una vista para los mails